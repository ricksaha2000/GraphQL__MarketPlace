# import * from './generated/prisma.graphql'

# type User{
#     id:ID!,
#     name:String!
# }

type SuccessMessage{
    message:String
}

type Mutation{
createItem(
    title:String,
    description:String,
    price:Int,
    image:String,
    largeImage:String,
): Item!
# The mutation is first defined with all variables
# after colon is what the mutation returns , ie. here an Item type
updateItem(
    id:ID!,
    title:String,
    description:String,
    price:Int
    ):Item!

#  in updateItem , not requiring all fields as we might not want to update all
deleteItem(id:ID!):Item
signup(email:String!,password:String!,name:String!):User!
signin(email:String!,password:String!):User!
# Return a custom type...BOO YAH..scroll up bruh
signout: SuccessMessage
requestReset(email:String!):SuccessMessage
resetPassword(resetToken:String!,
password:String!,
confirmPassword:String!): User!

}
type Query{
    items(where:ItemWhereInput ,
          orderBy:ItemOrderByInput ,
          skip:Int ,
          first:Int ):[Item]!
    item(where:ItemWhereUniqueInput!):Item
    itemsConnection(where:ItemWhereInput):ItemConnection!
    me: User
    # array has to be returned but the array can be empty...
    users:[User]!


}

# ItemWhereUniqueInput already comes using the prisma.graphql--refer for other CRUDS
# ItemWhereUniqueInput --> takes only id...

#Redefine User in YOGA so that there is no potential  pwd leak
type User{
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
#   cart: [CartItem!]!
#   orders: [OrderItem]
}